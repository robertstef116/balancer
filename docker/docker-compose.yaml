version: "3.9"
name: "balancer-master"
services:
  database:
    container_name: ${DB_HOST}
    image: "postgres:${POSTGRES_VERSION}"
    restart: always
    ports:
      - "${DB_EXTERNAL_PORT}:${DB_PORT}"
    environment:
      - "POSTGRES_USER=${DB_ADMIN}"
      - "POSTGRES_PASSWORD=${DB_ADMIN_PW}"
      - "POSTGRES_DB=${DB_NAME}"
    volumes:
      - ./data/database:/var/lib/postgresql/data
    networks:
      - database-svc
  init-database: # https://stackoverflow.com/questions/70322031/does-docker-compose-support-init-container
    image: "postgres:${POSTGRES_VERSION}"
    command: /init-database.sh
    restart: on-failure
    environment:
      - "POSTGRES_USER=${DB_ADMIN}"
      - "POSTGRES_PASSWORD=${DB_ADMIN_PW}"
      - "POSTGRES_DB=${DB_NAME}"
      - "POSTGRES_HOST=${DB_HOST}"
      - "POSTGRES_PORT=${DB_PORT}"
      - "ADMIN_PW=${ADMIN_PW}"
    volumes:
      - ../scripts/init-database.sh:/init-database.sh
      - ../scripts/init-database.sql:/init-database.sql
    depends_on:
      database:
        condition: service_started
    networks:
      - database-svc
  balancer-master:
    build: . # FOR LOCAL TESTING
    image: "r0bb3rt17/balancer-master:${BALANCER_VERSION}"
    restart: on-failure
    ports:
      - "${MASTER_EXTERNAL_PORT}:${MASTER_PORT}"
    environment:
      - "POSTGRES_USER=${DB_ADMIN}"
      - "POSTGRES_PASSWORD=${DB_ADMIN_PW}"
      - "POSTGRES_DB=${DB_NAME}"
      - "POSTGRES_HOST=${DB_HOST}"
      - "POSTGRES_PORT=${DB_PORT}"
    depends_on:
      init-database:
        condition: service_completed_successfully
    networks:
      - database-svc
  load_balancer:
    build: . # FOR LOCAL TESTING
    image: "r0bb3rt17/load_balancer:${BALANCER_VERSION}"
    restart: on-failure
    ports:
      - "${BALANCER_EXTERNAL_PORT}:${BALANCER_PORT}"
    environment:
      - "PORT=${BALANCER_PORT}"
      - "POSTGRES_USER=${DB_ADMIN}"
      - "POSTGRES_PASSWORD=${DB_ADMIN_PW}"
      - "POSTGRES_DB=${DB_NAME}"
      - "POSTGRES_HOST=${DB_HOST}"
      - "POSTGRES_PORT=${DB_PORT}"
    depends_on:
      init-database:
        condition: service_completed_successfully
#      broker:
#        condition: service_started
    networks:
      - database-svc
  rabitmq:
    container_name: ${RABBITMQ_HOST}
    image: "rabbitmq:${RABBITMQ_VERSION}"
    restart: on-failure
    ports:
      - "${RABBITMQ_EXTERNAL_PORT}:${RABBITMQ_PORT}"
    environment:
      - "RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}"
      - "RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}"
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    networks:
      - rabbitmq-svc
networks:
  database-svc:
  rabbitmq-svc:
